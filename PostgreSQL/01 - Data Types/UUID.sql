Added this line to break everything if I try to run the whole thing

/* 
UUID - Universal unique identifier

A UUID is a 128 bit ID generated by an algorithm that makes it unique in the know universe of that algorithm. i.e. if you
use the same algorithm to generate all your UUIDs, you know they will be unique.  These things are common and can be seen
all over the place (eB instance ID is a good example).

UUID is much better than the SERIAL data type if you need to ensure uniqueness across an entire system.  This is because
while SERIAL produces an ID that is unique to the particular database, UUIDs will be unique across all systems that use
that algorithm.  So for working with large, distributed systems, UUID is ideal.

In order to use UUIDs in Postgres, you need a third party algorthim (it's not inbuilt)
	- uuid-ossp extension works well.

Properties:
	1) 32 digits
	2) Hexidecimal
	3) Separated by hyphens

*/

-- To create some UUIDs, we must install/enable the extension:
CREATE EXTENSION IF NOT EXISTS "uuid-ossp";

-- To generate a UUID, we must call the extension's function:
SELECT 
	uuid_generate_v1(), -- V1 uses the mac address and current timestamp, among other things to generate the ID
	uuid_generate_v4() -- V4 is purely random (doesn't rely on traceable variables to generate the ID)
	
-- Create a table using UUID as the primary key:
CREATE TABLE table_uuid(
	product_id UUID DEFAULT uuid_generate_v1() PRIMARY KEY,
	product_name VARCHAR(100) NOT NULL
);
INSERT INTO table_uuid(product_name)
VALUES
	('Laptop'),
	('Pen'),
	('Pet antelope'),
	('Lumber')
RETURNING *